/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetoarq_simuladorcache;

import Estrutura.MemoriaPrincipal;
import Estrutura.Buffer;
import Estrutura.CacheL1;
import Estrutura.CacheL2;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aliso
 */
public class SimuCache extends javax.swing.JInternalFrame {

    Simulador simulador;
    Buffer buffer;
    CacheL2 cacheL2;
    CacheL1 cacheL1;
    CacheL1 cacheL1_2;
    MemoriaPrincipal memoria;
    String mapeamento, cacheTipo, proc;
    ProcessadorThread pth1, pth2;

    int tamCmds = 0;
    long tempo = 0;

    int tamMemoria = 128;

    /**
     * * 32 BLOCOS COM 4 PALAVRAS ***
     */
    /**
     * Creates new form SimuCache
     */
    public SimuCache(String mapeamento, String cacheTipo, String proc) {
        initComponents();
        this.mapeamento = mapeamento;
        this.cacheTipo = cacheTipo;
        this.proc = proc;

        System.out.println(mapeamento + " " + cacheTipo);
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null);

        simulador = new Simulador(mapeamento);

        this.buffer = this.simulador.getBuffer();
        this.memoria = this.simulador.getMp();

        DefaultTableModel dataModelMemoria = (DefaultTableModel) jtblMp.getModel();
        for (int i = 0; i < tamMemoria; i++) {
            dataModelMemoria.setValueAt(Simulador.decimal_para_binario(i, 7), i, 0);
            dataModelMemoria.setValueAt(i / 4, i, 1);
            dataModelMemoria.setValueAt(memoria.getBloco()[i / 4].getCelula(i % 4), i, 2);
        }
        jtblMp.setModel(dataModelMemoria);

        if (cacheTipo.equalsIgnoreCase("L2")) {
            jPanelCacheL1L2.setVisible(false);
            jPanelCacheL1.setVisible(false);
        }
        if (cacheTipo.equalsIgnoreCase("L1L2") && proc.equalsIgnoreCase("SINGLE")) {
            jPanelCacheL1L2.setVisible(false);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelComandos = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPaneComandos = new javax.swing.JTextPane();
        jButtonExec = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableLer = new javax.swing.JTable();
        jPanelSimulacao = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblMp = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtblBuffer = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCacheL2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableGrafico2 = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableGraficoAll = new javax.swing.JTable();
        jPanelCacheL1L2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTableCacheL1_2 = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTableGrafico1_2 = new javax.swing.JTable();
        jPanelCacheL1 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTableGrafico1 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableCacheL1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(0, 52, 84));

        jPanelComandos.setBackground(new java.awt.Color(0, 52, 84));

        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("FILA DE COMANDOS");

        jScrollPane4.setViewportView(jTextPaneComandos);

        jButtonExec.setText("Executar");
        jButtonExec.setBorder(null);
        jButtonExec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecActionPerformed(evt);
            }
        });

        jTableLer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ler"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTableLer);

        javax.swing.GroupLayout jPanelComandosLayout = new javax.swing.GroupLayout(jPanelComandos);
        jPanelComandos.setLayout(jPanelComandosLayout);
        jPanelComandosLayout.setHorizontalGroup(
            jPanelComandosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelComandosLayout.createSequentialGroup()
                .addGroup(jPanelComandosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelComandosLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanelComandosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonExec, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelComandosLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel7)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelComandosLayout.setVerticalGroup(
            jPanelComandosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelComandosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelComandosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addComponent(jButtonExec, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelSimulacao.setBackground(new java.awt.Color(0, 52, 84));

        jtblMp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Endereço", "Bloco", "Dado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtblMp);

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Memória Principal");

        jtblBuffer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Destino", "Espaço 00", "Espaço 01", "Espaço 10", "Espaço 11", "Ocupado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jtblBuffer);

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Buffer ");

        jTableCacheL2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Tag.", "Ind.", "BLC[0]", "BLC[1]", "BLC[2]", "BLC[3]", "Sujo", "Válido", "SUBS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableCacheL2);

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Memória Cache L2");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Projeto 2 - Sistema de Memória");

        jTableGrafico2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Leituras", "Hit Leitura", "Miss Leitura", "Escritas", "Hit Escritas", "Miss Escritas", "Total de Acessos", "Desempenho"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTableGrafico2);

        jTableGraficoAll.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Tamanho", "Hit Leituras", "Miss Leituras", "Hit Escritas", "Miss Escritas", "Tempo", "Desempenho", "Ciclos de Clock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(jTableGraficoAll);

        jPanelCacheL1L2.setBackground(new java.awt.Color(0, 52, 84));

        jLabel5.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Memória Cache L1 #2");

        jScrollPane11.setBorder(null);
        jScrollPane11.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane11.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTableCacheL1_2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Tag.", "BLC[0]", "BLC[1]", "BLC[2]", "BLC[3]", "Sujo", "Valido", "SUBS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane11.setViewportView(jTableCacheL1_2);

        jTableGrafico1_2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Leituras", "Hit Leitura", "Miss Leitura", "Escritas", "Hit Escritas", "Miss Escritas", "Total de Acessos", "Desempenho"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(jTableGrafico1_2);

        javax.swing.GroupLayout jPanelCacheL1L2Layout = new javax.swing.GroupLayout(jPanelCacheL1L2);
        jPanelCacheL1L2.setLayout(jPanelCacheL1L2Layout);
        jPanelCacheL1L2Layout.setHorizontalGroup(
            jPanelCacheL1L2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCacheL1L2Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane10)
            .addComponent(jScrollPane11)
        );
        jPanelCacheL1L2Layout.setVerticalGroup(
            jPanelCacheL1L2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCacheL1L2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanelCacheL1.setBackground(new java.awt.Color(0, 52, 84));

        jTableGrafico1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Leituras", "Hit Leitura", "Miss Leitura", "Escritas", "Hit Escritas", "Miss Escritas", "Total de Acessos", "Desempenho"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(jTableGrafico1);

        jScrollPane7.setBorder(null);
        jScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane7.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTableCacheL1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Tag.", "BLC[0]", "BLC[1]", "BLC[2]", "BLC[3]", "Sujo", "Valido", "SUBS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTableCacheL1);

        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Memória Cache L1 #1");

        javax.swing.GroupLayout jPanelCacheL1Layout = new javax.swing.GroupLayout(jPanelCacheL1);
        jPanelCacheL1.setLayout(jPanelCacheL1Layout);
        jPanelCacheL1Layout.setHorizontalGroup(
            jPanelCacheL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCacheL1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane9)
            .addComponent(jScrollPane7)
        );
        jPanelCacheL1Layout.setVerticalGroup(
            jPanelCacheL1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCacheL1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanelSimulacaoLayout = new javax.swing.GroupLayout(jPanelSimulacao);
        jPanelSimulacao.setLayout(jPanelSimulacaoLayout);
        jPanelSimulacaoLayout.setHorizontalGroup(
            jPanelSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSimulacaoLayout.createSequentialGroup()
                .addGroup(jPanelSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelCacheL1L2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane6)
                    .addComponent(jPanelCacheL1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelSimulacaoLayout.createSequentialGroup()
                        .addGroup(jPanelSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanelSimulacaoLayout.createSequentialGroup()
                                .addGap(201, 201, 201)
                                .addComponent(jLabel8))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 798, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelSimulacaoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3)))
                        .addGap(0, 9, Short.MAX_VALUE))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(34, 34, 34)
                .addGroup(jPanelSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSimulacaoLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jLabel1)
                        .addGap(85, 85, 85))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSimulacaoLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
        );
        jPanelSimulacaoLayout.setVerticalGroup(
            jPanelSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSimulacaoLayout.createSequentialGroup()
                .addGroup(jPanelSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSimulacaoLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1))
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanelSimulacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSimulacaoLayout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(jPanelCacheL1L2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanelCacheL1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanelComandos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelSimulacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelSimulacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelComandos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(4, 4, 4))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecActionPerformed
        // TODO add your handling code here:
        int hitleitura = 0, hitescrita = 0, missleitura = 0, missescrita = 0;
        float desempenho = 0;
        DefaultTableModel dataMLer = new DefaultTableModel();

        jTableLer.setModel(dataMLer);

        dataMLer.addColumn("Ler");
        jTableLer.getColumnModel().getColumn(0).setPreferredWidth(10);   //Tamanho da Coluna 1

        if (proc.equalsIgnoreCase("DUAL") && cacheTipo.equalsIgnoreCase("L1L2")) {
            String str[] = jTextPaneComandos.getText().split("###############");

            String str1[] = str[0].split("\n");

            String str2[] = str[1].split("\n");

            pth1 = new ProcessadorThread(1, str1, dataMLer, simulador, cacheTipo, this);
            pth2 = new ProcessadorThread(2, str2, dataMLer, simulador, cacheTipo, this);

            long tempoInicio = System.currentTimeMillis();

            pth1.start();

            pth2.start();

            try {
                pth1.join();
                pth2.join();
                tamCmds = pth1.getTamCmds() + pth2.getTamCmds();

            } catch (InterruptedException ex) {
                Logger.getLogger(SimuCache.class.getName()).log(Level.SEVERE, null, ex);
            }

            tempo += ((System.currentTimeMillis() - tempoInicio)/1.5);
            hitleitura = (simulador.getN_leiturasL1() - simulador.getMiss_leituraL1())
                    + (simulador.getN_leiturasL2() - simulador.getMiss_leituraL2())
                    + (simulador.getN_leiturasL1_2() - simulador.getMiss_leituraL1_2());

            missleitura = simulador.getMiss_leituraL1() + simulador.getMiss_leituraL2() + simulador.getMiss_leituraL1_2();
            hitescrita = (simulador.getN_escritasL1() - simulador.getMiss_escritaL1())
                    + (simulador.getN_escritasL2() - simulador.getMiss_escritaL2())
                    + (simulador.getN_escritasL1_2() - simulador.getMiss_escritaL1_2());

            missescrita = simulador.getMiss_escritaL1() + simulador.getMiss_escritaL2() + simulador.getMiss_escritaL1_2();

            int acessosL1 = simulador.getN_escritasL1() + simulador.getN_leiturasL1();
            int miss1 = simulador.getMiss_escritaL1() + simulador.getMiss_leituraL1();
            int acessosL2 = simulador.getN_escritasL2() + simulador.getN_leiturasL2();
            int missL2 = simulador.getMiss_escritaL2() + simulador.getMiss_leituraL2();
            int acessosL1_2 = simulador.getN_escritasL1_2() + simulador.getN_leiturasL1_2();
            int miss1_2 = simulador.getMiss_escritaL1_2() + simulador.getMiss_leituraL1_2();

            desempenho = ((((acessosL1 - miss1) / Float.valueOf(acessosL1)) * 100)
                    + (((acessosL2 - missL2) / Float.valueOf(acessosL2)) * 100)
                    + (((acessosL1_2 - miss1_2) / Float.valueOf(acessosL1_2)) * 100)) / 3;

        } else if (proc.equalsIgnoreCase("SINGLE") && cacheTipo.equalsIgnoreCase("L1L2")) {
            String str[] = jTextPaneComandos.getText().split("\n");

            pth1 = new ProcessadorThread(1, str, dataMLer, simulador, cacheTipo, this);

            long tempoInicio = System.currentTimeMillis();

            pth1.start();

            try {
                pth1.join();
                tamCmds = pth1.getTamCmds();
            } catch (InterruptedException ex) {
                Logger.getLogger(SimuCache.class.getName()).log(Level.SEVERE, null, ex);
            }

            tempo += (System.currentTimeMillis() - tempoInicio);
            hitleitura = (simulador.getN_leiturasL1() - simulador.getMiss_leituraL1())
                    + (simulador.getN_leiturasL2() - simulador.getMiss_leituraL2());

            missleitura = simulador.getMiss_leituraL1() + simulador.getMiss_leituraL2();

            hitescrita = (simulador.getN_escritasL1() - simulador.getMiss_escritaL1())
                    + (simulador.getN_escritasL2() - simulador.getMiss_escritaL2());

            missescrita = simulador.getMiss_escritaL1() + simulador.getMiss_escritaL2();

            int acessosL1 = simulador.getN_escritasL1() + simulador.getN_leiturasL1();
            int miss1 = simulador.getMiss_escritaL1() + simulador.getMiss_leituraL1();
            int acessosL2 = simulador.getN_escritasL2() + simulador.getN_leiturasL2();
            int missL2 = simulador.getMiss_escritaL2() + simulador.getMiss_leituraL2();

            desempenho = ((((acessosL1 - miss1) / Float.valueOf(acessosL1)) * 100)
                    + (((acessosL2 - missL2) / Float.valueOf(acessosL2)) * 100)) / 2;
        } else {
            String str[] = jTextPaneComandos.getText().split("\n");

            long tempoInicio = System.currentTimeMillis();

            for (String linhac : str) {

                String line[] = linhac.split(" ");

                if (line[0].equalsIgnoreCase("LOAD")) {
                    tamCmds++;
                    if (cacheTipo.equalsIgnoreCase("L2")) {
                        dataMLer.addRow(new String[]{String.valueOf(simulador.LOADCacheL2(line[1]))});
                    }

                    this.executa();
                }
                if (line[0].equalsIgnoreCase("STORE")) {
                    tamCmds++;
                    if (cacheTipo.equalsIgnoreCase("L2")) {

                        simulador.STORE_L2(line[1], line[2].charAt(0));

                    }

                    this.executa();
                }

            }

            tempo += (System.currentTimeMillis() - tempoInicio);

            hitleitura = (simulador.getN_leiturasL2() - simulador.getMiss_leituraL2());

            missleitura = simulador.getMiss_leituraL2();

            hitescrita = (simulador.getN_escritasL2() - simulador.getMiss_escritaL2());

            missescrita = simulador.getMiss_escritaL2();

            int acessosL1 = simulador.getN_escritasL1() + simulador.getN_leiturasL1();
            int miss1 = simulador.getMiss_escritaL1() + simulador.getMiss_leituraL1();

            desempenho = (((acessosL1 - miss1) / Float.valueOf(acessosL1)) * 100);

        }

        jTableLer.setModel(dataMLer);
        ////////////////////////////// ////////////////////
        DefaultTableModel dataModelGraficoAll = (DefaultTableModel) jTableGraficoAll.getModel();
        dataModelGraficoAll.setValueAt(tamCmds, 0, 0);
        dataModelGraficoAll.setValueAt(String.valueOf(hitleitura), 0, 1);
        dataModelGraficoAll.setValueAt(String.valueOf(missleitura), 0, 2);
        dataModelGraficoAll.setValueAt(String.valueOf(hitescrita), 0, 3);
        dataModelGraficoAll.setValueAt(String.valueOf(missescrita), 0, 4);
        dataModelGraficoAll.setValueAt(tempo + "ms", 0, 5);
        dataModelGraficoAll.setValueAt(String.valueOf(desempenho) + "%", 0, 6);
        dataModelGraficoAll.setValueAt(String.valueOf(simulador.getInstClock()), 0, 7);
        jTableGraficoAll.setModel(dataModelGraficoAll);

        ////////////////////////////// ////////////////////

    }//GEN-LAST:event_jButtonExecActionPerformed
    public synchronized void executa() {
        this.buffer = this.simulador.getBuffer();
        this.cacheL1 = this.simulador.getCacheL1();
        this.cacheL1_2 = this.simulador.getCacheL1_2();
        this.cacheL2 = this.simulador.getCacheL2();
        this.memoria = this.simulador.getMp();

        ////////////////////////////// ////////////////////
        int k;
        DefaultTableModel dataModelMemoria = (DefaultTableModel) jtblMp.getModel();
        for (int i = 0; i < tamMemoria; i++) {
            dataModelMemoria.setValueAt(Simulador.decimal_para_binario(i, 7), i, 0);
            dataModelMemoria.setValueAt(i / 4, i, 1);
            dataModelMemoria.setValueAt(memoria.getBloco()[i / 4].getCelula(i % 4), i, 2);
        }
        jtblMp.setModel(dataModelMemoria);
        ////////////////////////////// ////////////////////
        if (cacheTipo.equalsIgnoreCase("L1L2")) {
            DefaultTableModel dataModelCacheL1 = (DefaultTableModel) jTableCacheL1.getModel();
            k = 0;
            for (int j = 0; j < 2; j++) {
                //////////////////// TAG ////////////////////
                if (cacheL1.getConjunto(0).getQuadro(j).getBit_validade()) {
                    dataModelCacheL1.setValueAt(Simulador.decimal_para_binario(cacheL1.getConjunto(0).getQuadro(j).getRotulo(), 3)
                            + Simulador.decimal_para_binario(cacheL1.getConjunto(0).getQuadro(j).getInd(), 2), k, 0);
                    //////////////////// BLOCO ////////////////////
                    dataModelCacheL1.setValueAt(cacheL1.getConjunto(0).getQuadro(j).getBloco().getCelula(0), k, 1);
                    dataModelCacheL1.setValueAt(cacheL1.getConjunto(0).getQuadro(j).getBloco().getCelula(1), k, 2);
                    dataModelCacheL1.setValueAt(cacheL1.getConjunto(0).getQuadro(j).getBloco().getCelula(2), k, 3);
                    dataModelCacheL1.setValueAt(cacheL1.getConjunto(0).getQuadro(j).getBloco().getCelula(3), k, 4);

                    //////////////////// FLAGS ////////////////////
                    dataModelCacheL1.setValueAt(cacheL1.getConjunto(0).getQuadro(j).getBit_sujo(), k, 5);
                    dataModelCacheL1.setValueAt(cacheL1.getConjunto(0).getQuadro(j).getBit_validade(), k, 6);

                    //////////////////// FILA ////////////////////
                    dataModelCacheL1.setValueAt(cacheL1.getConjunto(0).getQuadro(j).getLru(), k, 7);

                    k++;
                }
            }
            jTableCacheL1.setModel(dataModelCacheL1);
        }
        ////////////////////////////// ////////////////////
        if (cacheTipo.equalsIgnoreCase("L1L2")) {
            DefaultTableModel dataModelCacheL1_2 = (DefaultTableModel) jTableCacheL1_2.getModel();
            k = 0;
            for (int j = 0; j < 2; j++) {
                //////////////////// TAG ////////////////////
                if (cacheL1_2.getConjunto(0).getQuadro(j).getBit_validade()) {
                    dataModelCacheL1_2.setValueAt(Simulador.decimal_para_binario(cacheL1_2.getConjunto(0).getQuadro(j).getRotulo(), 3)
                            + Simulador.decimal_para_binario(cacheL1_2.getConjunto(0).getQuadro(j).getInd(), 2), k, 0);
                    //////////////////// BLOCO ////////////////////
                    dataModelCacheL1_2.setValueAt(cacheL1_2.getConjunto(0).getQuadro(j).getBloco().getCelula(0), k, 1);
                    dataModelCacheL1_2.setValueAt(cacheL1_2.getConjunto(0).getQuadro(j).getBloco().getCelula(1), k, 2);
                    dataModelCacheL1_2.setValueAt(cacheL1_2.getConjunto(0).getQuadro(j).getBloco().getCelula(2), k, 3);
                    dataModelCacheL1_2.setValueAt(cacheL1_2.getConjunto(0).getQuadro(j).getBloco().getCelula(3), k, 4);

                    //////////////////// FLAGS ////////////////////
                    dataModelCacheL1_2.setValueAt(cacheL1_2.getConjunto(0).getQuadro(j).getBit_sujo(), k, 5);
                    dataModelCacheL1_2.setValueAt(cacheL1_2.getConjunto(0).getQuadro(j).getBit_validade(), k, 6);

                    //////////////////// FILA ////////////////////
                    dataModelCacheL1_2.setValueAt(cacheL1_2.getConjunto(0).getQuadro(j).getLru(), k, 7);

                    k++;
                }
            }
            jTableCacheL1_2.setModel(dataModelCacheL1_2);
        }

        ////////////////////////////// ////////////////////
        DefaultTableModel dataModelCacheL2 = (DefaultTableModel) jTableCacheL2.getModel();
        k = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 2; j++) {
                //////////////////// TAG ////////////////////
                if (cacheL2.getConjunto(i).getQuadro(j).getBit_validade()) {
                    dataModelCacheL2.setValueAt(Simulador.decimal_para_binario(cacheL2.getConjunto(i).getQuadro(j).getRotulo(), 3), k, 0);
                    //////////////////// INDICE  ////////////////////
                    dataModelCacheL2.setValueAt(Simulador.decimal_para_binario(i, 2), k, 1);
                    //////////////////// BLOCO ////////////////////
                    dataModelCacheL2.setValueAt(cacheL2.getConjunto(i).getQuadro(j).getBloco().getCelula(0), k, 2);
                    dataModelCacheL2.setValueAt(cacheL2.getConjunto(i).getQuadro(j).getBloco().getCelula(1), k, 3);
                    dataModelCacheL2.setValueAt(cacheL2.getConjunto(i).getQuadro(j).getBloco().getCelula(2), k, 4);
                    dataModelCacheL2.setValueAt(cacheL2.getConjunto(i).getQuadro(j).getBloco().getCelula(3), k, 5);

                    //////////////////// FLAGS ////////////////////
                    dataModelCacheL2.setValueAt(cacheL2.getConjunto(i).getQuadro(j).getBit_sujo(), k, 6);
                    dataModelCacheL2.setValueAt(cacheL2.getConjunto(i).getQuadro(j).getBit_validade(), k, 7);

                    //////////////////// FILA ////////////////////
                    dataModelCacheL2.setValueAt(cacheL2.getConjunto(i).getQuadro(j).getLru(), k, 8);

                }

                k++;
            }
        }

        jTableCacheL2.setModel(dataModelCacheL2);

        ////////////////////////////// ////////////////////
        DefaultTableModel dataModelBuffer = (DefaultTableModel) jtblBuffer.getModel();
        for (int i = 0; i < 2; i++) {

            if (buffer.getOcupado(i)) {
                dataModelBuffer.setValueAt(Simulador.decimal_para_binario(buffer.getDestino(i), 7), i, 0);
                dataModelBuffer.setValueAt(buffer.getBloco(i).getCelula(0), i, 1);
                dataModelBuffer.setValueAt(buffer.getBloco(i).getCelula(1), i, 2);
                dataModelBuffer.setValueAt(buffer.getBloco(i).getCelula(2), i, 3);
                dataModelBuffer.setValueAt(buffer.getBloco(i).getCelula(3), i, 4);
                dataModelBuffer.setValueAt(buffer.getOcupado(i), i, 5);
            }

        }
        jtblBuffer.setModel(dataModelBuffer);

        ////////////////////////////// ////////////////////
        DefaultTableModel dataModelGrafico1 = (DefaultTableModel) jTableGrafico1.getModel();
        dataModelGrafico1.setValueAt(String.valueOf(simulador.getN_leiturasL1()), 0, 0);
        dataModelGrafico1.setValueAt(String.valueOf(simulador.getN_leiturasL1() - simulador.getMiss_leituraL1()), 0, 1);
        dataModelGrafico1.setValueAt(String.valueOf(simulador.getMiss_leituraL1()), 0, 2);
        dataModelGrafico1.setValueAt(String.valueOf(simulador.getN_escritasL1()), 0, 3);
        dataModelGrafico1.setValueAt(String.valueOf(simulador.getN_escritasL1() - simulador.getMiss_escritaL1()), 0, 4);
        dataModelGrafico1.setValueAt(String.valueOf(simulador.getMiss_escritaL1()), 0, 5);
        int acessosL1 = simulador.getN_escritasL1() + simulador.getN_leiturasL1();
        dataModelGrafico1.setValueAt(acessosL1, 0, 6);
        int miss1 = simulador.getMiss_escritaL1() + simulador.getMiss_leituraL1();
        if (acessosL1 > 0) {
            dataModelGrafico1.setValueAt(String.valueOf(((acessosL1 - miss1) / Float.valueOf(acessosL1)) * 100) + "%", 0, 7);
        }
        jTableGrafico1.setModel(dataModelGrafico1);

        ////////////////////////////// ////////////////////
        DefaultTableModel dataModelGrafico2 = (DefaultTableModel) jTableGrafico2.getModel();
        dataModelGrafico2.setValueAt(String.valueOf(simulador.getN_leiturasL2()), 0, 0);
        dataModelGrafico2.setValueAt(String.valueOf(simulador.getN_leiturasL2() - simulador.getMiss_leituraL2()), 0, 1);
        dataModelGrafico2.setValueAt(String.valueOf(simulador.getMiss_leituraL2()), 0, 2);
        dataModelGrafico2.setValueAt(String.valueOf(simulador.getN_escritasL2()), 0, 3);
        dataModelGrafico2.setValueAt(String.valueOf(simulador.getN_escritasL2() - simulador.getMiss_escritaL2()), 0, 4);
        dataModelGrafico2.setValueAt(String.valueOf(simulador.getMiss_escritaL2()), 0, 5);
        int acessosL2 = simulador.getN_escritasL2() + simulador.getN_leiturasL2();
        dataModelGrafico2.setValueAt(acessosL2, 0, 6);
        int missL2 = simulador.getMiss_escritaL2() + simulador.getMiss_leituraL2();
        if (acessosL2 > 0) {
            dataModelGrafico2.setValueAt(String.valueOf(((acessosL2 - missL2) / Float.valueOf(acessosL2)) * 100) + "%", 0, 7);
        }
        jTableGrafico2.setModel(dataModelGrafico2);

        ////////////////////////////// ////////////////////
        DefaultTableModel dataModelGrafico1_2 = (DefaultTableModel) jTableGrafico1_2.getModel();
        dataModelGrafico1_2.setValueAt(String.valueOf(simulador.getN_leiturasL1_2()), 0, 0);
        dataModelGrafico1_2.setValueAt(String.valueOf(simulador.getN_leiturasL1_2() - simulador.getMiss_leituraL1_2()), 0, 1);
        dataModelGrafico1_2.setValueAt(String.valueOf(simulador.getMiss_leituraL1_2()), 0, 2);
        dataModelGrafico1_2.setValueAt(String.valueOf(simulador.getN_escritasL1_2()), 0, 3);
        dataModelGrafico1_2.setValueAt(String.valueOf(simulador.getN_escritasL1_2() - simulador.getMiss_escritaL1_2()), 0, 4);
        dataModelGrafico1_2.setValueAt(String.valueOf(simulador.getMiss_escritaL1_2()), 0, 5);
        int acessosL1_2 = simulador.getN_escritasL1_2() + simulador.getN_leiturasL1_2();
        dataModelGrafico1_2.setValueAt(acessosL1_2, 0, 6);
        int miss1_2 = simulador.getMiss_escritaL1_2() + simulador.getMiss_leituraL1_2();
        if (acessosL1_2 > 0) {
            dataModelGrafico1_2.setValueAt(String.valueOf(((acessosL1_2 - miss1_2) / Float.valueOf(acessosL1_2)) * 100) + "%", 0, 7);
        }
        jTableGrafico1_2.setModel(dataModelGrafico1_2);

    }

    /**
     * *************************************************************************
     */
    public boolean verificaEndereco(String e) {
        if (e.length() != 7) {
            return false;
        } else {
            for (int i = 0; i < e.length(); i++) {
                if (e.charAt(i) != '0' && e.charAt(i) != '1') {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * *************************************************************************
     */
    public boolean verificaPalavra(String palavra) {
        char[] hexa = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'L', 'M'};
        if (palavra.length() != 1) {
            return false;
        } else {
            for (int j = 0; j < 16; j++) {
                if (palavra.charAt(0) == hexa[j]) {
                    return true;
                }
            }
        }
        return false;
    }

    public class ProcessadorThread extends Thread {

        private int idThread;
        private boolean teste = false;
        private String str[];
        DefaultTableModel dataMLer;
        private Simulador simulador;
        private String cacheTipo;
        private SimuCache main;
        private int tamCmds;

        public ProcessadorThread(int id, String str[], DefaultTableModel dataMLer, Simulador simu, String cache, SimuCache main) {
            this.idThread = id;
            this.str = str;
            this.dataMLer = dataMLer;
            this.simulador = simu;
            this.cacheTipo = cache;
            this.main = main;
            this.tamCmds = 0;
        }

        public void run() {

            for (String linhac : str) {

                String line[] = linhac.split(" ");

                if (line[0].equalsIgnoreCase("LOAD")) {
                    tamCmds++;
                    if (cacheTipo.equalsIgnoreCase("L1L2")) {
                        if (idThread == 1) {
                            dataMLer.addRow(new String[]{String.valueOf(simulador.LOADCacheL1L2(line[1]))});
                        } else {
                            dataMLer.addRow(new String[]{String.valueOf(simulador.LOADCacheL1L2_2(line[1]))});
                        }

                    }

                    main.executa();
                }
                if (line[0].equalsIgnoreCase("STORE")) {
                    tamCmds++;
                    if (cacheTipo.equalsIgnoreCase("L1L2")) {
                        if (idThread == 1) {
                            simulador.STORE_L1L2(line[1], line[2].charAt(0));
                        } else {
                            simulador.STORE_L1L2_2(line[1], line[2].charAt(0));
                        }

                    }

                    main.executa();
                }

            }
        }

        public int getTamCmds() {
            return tamCmds;
        }

        public void setTamCmds(int tamCmds) {
            this.tamCmds = tamCmds;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExec;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelCacheL1;
    private javax.swing.JPanel jPanelCacheL1L2;
    private javax.swing.JPanel jPanelComandos;
    private javax.swing.JPanel jPanelSimulacao;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTableCacheL1;
    private javax.swing.JTable jTableCacheL1_2;
    private javax.swing.JTable jTableCacheL2;
    private javax.swing.JTable jTableGrafico1;
    private javax.swing.JTable jTableGrafico1_2;
    private javax.swing.JTable jTableGrafico2;
    private javax.swing.JTable jTableGraficoAll;
    private javax.swing.JTable jTableLer;
    private javax.swing.JTextPane jTextPaneComandos;
    private javax.swing.JTable jtblBuffer;
    private javax.swing.JTable jtblMp;
    // End of variables declaration//GEN-END:variables
}
